// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Prisma seed configuration
// npx prisma db seed

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_VERIFICATION
  SUSPENDED
}

enum RoleName {
  SUPER_ADMIN
  ADMIN
  TEACHER
  MENTOR
  STUDENT
  MODERATOR
}

model User {
  id                     String      @id @default(uuid())
  email                  String      @unique @db.VarChar(255)
  firstName              String      @db.VarChar(100)
  lastName               String      @db.VarChar(100)
  password               String      @db.VarChar(255)
  status                 UserStatus  @default(PENDING_VERIFICATION)
  isEmailVerified        Boolean     @default(false)
  emailVerificationToken String?     @db.VarChar(255)
  passwordResetToken     String?     @db.VarChar(255)
  passwordResetExpires   DateTime?
  lastLoginAt            DateTime?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt

  userRoles UserRole[]

  @@map("users")
}

model Role {
  id            String   @id @default(uuid())
  name          RoleName @unique
  displayName   String   @db.VarChar(255)
  description   String?  @db.Text
  hierarchyLevel Int     @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id         String   @id @default(uuid())
  userId     String
  roleId     String
  isActive   Boolean  @default(true)
  assignedAt DateTime?
  expiresAt  DateTime?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Contact {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @db.VarChar(255)
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([email])
  @@map("contacts")
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
  OTHER
}

enum MediaStatus {
  UPLOADING
  PROCESSING
  READY
  FAILED
  DELETED
}

enum EntityType {
  USER
  COURSE
  LESSON
  ASSIGNMENT
  POST
  COMMENT
  OTHER
}

model Media {
  id           String      @id @default(uuid())
  // File information
  fileName     String      @db.VarChar(255)
  originalName String      @db.VarChar(255)
  mimeType     String      @db.VarChar(100)
  fileSize     Int         // in bytes
  type         MediaType
  status       MediaStatus @default(UPLOADING)
  
  // S3 information
  s3Key        String      @unique @db.VarChar(500)
  s3Bucket     String      @db.VarChar(255)
  s3Region     String      @db.VarChar(50)
  s3Url        String      @db.VarChar(1000)
  
  // Polymorphic relationship fields
  entityType   EntityType?
  entityId     String?     @db.VarChar(255)
  
  // Optional metadata
  description  String?     @db.Text
  alt          String?     @db.VarChar(500) // For images (accessibility)
  duration     Int?        // For video/audio in seconds
  width        Int?        // For images/videos
  height       Int?        // For images/videos
  thumbnailUrl String?     @db.VarChar(1000)
  
  // Ownership and tracking
  uploadedById String
  uploadedByIp String?     @db.VarChar(45) // IPv6 compatible
  isPublic     Boolean     @default(false)
  
  // Timestamps
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?   // Soft delete
  
  @@index([entityType, entityId])
  @@index([uploadedById])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([s3Key])
  @@map("media")
}